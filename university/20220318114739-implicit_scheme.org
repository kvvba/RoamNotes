:PROPERTIES:
:ID:       575f159f-700d-460c-a20a-c69a2c32dfd2
:END:
#+title: Implicit scheme

[[id:d20c1d12-c5cb-4518-8446-8b7bd9fedd1c][Temporal discretization]] of the [[id:9144ea7d-bb69-4755-99f5-ceeffe2bb21f][unsteady]] heat conduction equation using the implicit scheme.
The next time step n+1 is calculated using values at n, which are known, and values of n+1, which are initially unknown. This is in contrast to the [[id:b1d6e8fe-ce6a-431e-96bd-6a70ec809625][Explicit scheme]], which uses only values at n.
T_i^(n+1) = T_i^n + \Delta t RHS^(n,n+1)

Using a central difference (see: [[id:7b412b3c-ecce-47ff-a186-ef2fb10cf387][Finite differences]]) on the example equation:
T_i^(n+1) = T_i^n + (\Delta t)/((\Delta x)^2) \cdot (0.5(T_(i+1)^(n+1) + T_(i+1)^n) + 0.5(-2T_i^(n+1) - 2T_i^n) + 0.5(T_(i-1)^(n+1) + T_(i-1)^n))

Centering around a grid point 2 and grid point 3, T_3^(n+1) is used in both process. If process 2 wants the latest value from process 1 it will need to wait for process 1 to finish. This will have a negative affect on parallelization performance (see: [[id:725c9328-6390-45b6-aaab-2d73693f1ded][HPC basics]]) - processes will not be able to work in parallel.

* Solving for the implicit case
Re-arrange the equation to:
(\Delta t)/(2(\Delta x)^2) \cdot T_(i-1)^(n+1) - [1 + (\Delta t)/((\Delta x)^2)] \cdot T_i^(n+1) + (\Delta t)/(2(\Delta x)^2) \cdot T_(i+1)^(n+1) = -T_n^n - (\Delta t)/(2(\Delta x)^2) \cdot (T_(i+1)^n - 2T_i^n + T_(i-1)^n)

Simplifying nomenclature:
A = (\Delta t)/(2(\Delta x)^2)
B = 1 + (\Delta t)/((\Delta x)^2)
K_i = -T_n^n - (\Delta t)/(2(\Delta x)^2) \cdot (T_(i+1)^n - 2T_i^n + T_(i-1)^n)

Hence:
AT_(i-1)^(n+1) - BT_i^(n+1) + AT_(i+1)^(n+1) = K_i

Solving at grid points 2-6, we obtain a system of simultaneous equations. In this case, a tridiagonal matrix.

| -B | A  | 0  | 0  |  0 |   | T_2^(n+1) |   | K_2 - AT_1 |
|----+----+----+----+----+---+---------+---+----------|
|  A | -B | A  | 0  |  0 |   | T_3^(n+1) |   | K_3       |
|----+----+----+----+----+---+---------+---+----------|
|  0 | A  | -B | A  |  0 | \times | T_4^(n+1) | = | K_4       |
|----+----+----+----+----+---+---------+---+----------|
|  0 | 0  | A  | -B |  A |   | T_5^(n+1) |   | K_5       |
|----+----+----+----+----+---+---------+---+----------|
|  0 | 0  | 0  | A  | -B |   | T_6^(n+1) |   | K_6 - AT_7 |


* Advantages and disadvantages
** Advantages
- Stability can be maintained over much larger values of \Delta t, hence using considerably fewer time steps to make calculations over a given interval of t
** Disadvantages
- More complicated to set up and program than [[id:b1d6e8fe-ce6a-431e-96bd-6a70ec809625][Explicit scheme]]
- Since massive matrix manipulations are usually required, the computer time per timestep is larger
- For [[id:9144ea7d-bb69-4755-99f5-ceeffe2bb21f][steady-state]] computations, time accuracy is not important
